# Arichain Automation Script

This project contains two Python scripts (`main.py` and `mainnoproxy.py`) designed to automate interactions with the Arichain API, including account login, daily check-ins, quiz answering, and event processing. The `main.py` script supports proxy usage for enhanced privacy and reliability, while `mainnoproxy.py` operates without proxies for simpler setups.

## Register
Download apps Ari Wallet in Playstore / Apps Store

## Features
- **Account Login**: Authenticate accounts and retrieve session codes.
- **Daily Check-in**: Perform daily check-ins for rewards.
- **Quiz Automation**: Fetch and answer daily quizzes.
- **Event Processing**: Process available events, skipping specified or completed ones.
- **Proxy Support** (`main.py` only): Use proxies to manage API requests.
- **Multithreading** (`main.py` only): Process multiple accounts concurrently.

## Prerequisites
- **Python 3.10+**: Ensure Python is installed on your system.
- **Required Files**:
  - `akun.txt`: Contains email and password pairs for login.
  - `data.txt`: Stores account details (email, password, address, session code).
  - `proxies.txt` (for `main.py` only): Lists proxy servers for API requests.
- **Internet Connection**: Required for API interactions.

## Installation
1. **Clone or Download the Repository**:
   ```bash
   git clone https://github.com/IopiXD/AriChainBOT
   cd AriChainBOT
   ```

2. **Set Up a Virtual Environment** (recommended):
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```

3. **Install Dependencies**:
   Create a `requirements.txt` file with the following content:
   ```
   requests
   colorama
   pytz
   ```
   Then install the dependencies:
   ```bash
   pip install -r requirements.txt
   ```

4. **Prepare Required Files**:
   - **akun.txt**: Create a file named `akun.txt` with email and password pairs in the format:
     ```
     email1@example.com|password1
     email2@example.com|password2
     ```
     Example:
     ```
     user1@example.com|pass123
     user2@example.com|pass456
     ```
   - **data.txt**: This file is automatically generated by the script during the "Get Session Codes" process. It stores account details in the format:
     ```
     email | password | address | session_code
     ```
     Example:
     ```
     user1@example.com | pass123 | 0x123... | abc123...
     user2@example.com | pass456 | 0x456... | def456...
     ```
   - **proxies.txt** (for `main.py` only): Create a file named `proxies.txt` with proxy servers in the format `http://ip:port` or `http://user:pass@ip:port`. Example:
     ```
     http://192.168.1.1:8080
     http://user:pass@192.168.1.2:8080
     ```

## Usage
1. **Run the Script**:
   - For proxy support:
     ```bash
     python main.py
     ```
   - Without proxy support:
     ```bash
     python mainnoproxy.py
     ```

2. **Menu Options**:
   The script presents a menu with three options:
   - **1. Get Session Codes**: Logs in accounts from `akun.txt` and saves session codes to `data.txt`.
   - **2. Process Accounts Daily + Quiz + Clear Task**: Performs daily check-ins, answers quizzes, and processes events for accounts in `data.txt`.
   - **3. Exit**: Exits the program.

3. **Quiz Interaction**:
   - When selecting option 2, the script fetches quiz questions for the first account in `data.txt`.
   - You will be prompted to enter a quiz answer ID (e.g., `388`). This ID should correspond to the correct answer for the quiz question displayed.

4. **Proxy Usage** (`main.py` only):
   - Ensure `proxies.txt` contains valid proxy servers.
   - The script tests each proxy before use and retries up to 10 times to find a working proxy.
   - If no proxies are available, the script will exit or skip the account.

## Configuration
- **API Endpoints**: Defined in the scripts under the `Constants` section. Ensure the URLs are correct:
  - `SIGNIN_URL`: For account login.
  - `CHECKIN_URL`: For daily check-ins.
  - `QUIZ_QUESTION_URL` and `QUIZ_ANSWER_URL`: For quiz interactions.
  - `EVENTS_URL`: For fetching events.
- **ThreadPoolExecutor** (`main.py` only): Configured with `max_workers=5` for login and `max_workers=5` for account processing. Adjust these values based on your system's capacity.
- **Retry Mechanism**: The scripts retry failed API requests up to 7 times with exponential backoff.

## Troubleshooting
- **File Not Found**:
  - Ensure `akun.txt` and `data.txt` (for option 2) exist in the same directory as the script.
  - For `main.py`, ensure `proxies.txt` exists and contains valid proxies.
- **Proxy Issues** (`main.py`):
  - Verify proxies in `proxies.txt` are active and correctly formatted.
  - Test proxies manually using tools like `curl` or a proxy checker.
- **API Errors**:
  - Check internet connectivity.
  - Verify API endpoints are accessible and not rate-limited.
  - Ensure `session_code` in `data.txt` is valid (re-run option 1 if needed).
- **Quiz ID Input**:
  - Ensure the entered quiz answer ID matches the question displayed.
  - If quizzes are already completed, the script will skip them.

## Notes
- **Thread Safety**: `main.py` uses a `threading.Lock` to prevent race conditions when writing to `data.txt`.
- **Rate Limiting**: Be cautious of API rate limits. The scripts include retry logic, but excessive requests may lead to temporary bans.
- **Timezone**: The scripts use the Asia/Jakarta (WIB) timezone for timestamps.
- **Error Handling**: The scripts handle HTTP errors, network issues, and invalid data formats with retries and informative logs.

## Example Workflow
1. Create `akun.txt` with account credentials.
2. For `main.py`, create `proxies.txt` with proxy servers.
3. Run `python main.py` or `python mainnoproxy.py`.
4. Select option 1 to generate `data.txt` with session codes.
5. Select option 2 to process daily tasks and quizzes.
6. Enter the quiz answer ID when prompted.

## License
This project is for educational purposes only. Use at your own risk. Ensure compliance with Arichain's terms of service when using the API.
